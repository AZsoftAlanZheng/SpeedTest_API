'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mediaTypes = exports.name = undefined;
exports.detect = detect;
exports.validate = validate;
exports.parse = parse;

var _deckardcain = require('deckardcain');

var _deckardcain2 = _interopRequireDefault(_deckardcain);

var _drafter = require('drafter');

var _drafter2 = _interopRequireDefault(_drafter);

var _json = require('minim/lib/serialisers/json-0.6');

var _json2 = _interopRequireDefault(_json);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var name = exports.name = 'api-blueprint'; // API Blueprint parser for Fury.js

var mediaTypes = exports.mediaTypes = ['text/vnd.apiblueprint', 'text/vnd.apiblueprint+markdown'];

function detect(source) {
  return mediaTypes.indexOf(_deckardcain2.default.identify(source)) !== -1;
}

function validate(_ref, done) {
  var minim = _ref.minim,
      source = _ref.source,
      requireBlueprintName = _ref.requireBlueprintName;

  var options = {
    requireBlueprintName: requireBlueprintName
  };

  var serialiser = new _json2.default(minim);

  _drafter2.default.validate(source, options, function (err, parseResult) {
    if (parseResult) {
      done(err, serialiser.deserialise(parseResult));
    } else {
      done(err, parseResult);
    }
  });
}

/*
 * Parse an API Blueprint into refract elements.
 */
function parse(_ref2, done) {
  var minim = _ref2.minim,
      source = _ref2.source,
      generateSourceMap = _ref2.generateSourceMap,
      requireBlueprintName = _ref2.requireBlueprintName;

  var options = {
    exportSourcemap: !!generateSourceMap,
    requireBlueprintName: requireBlueprintName
  };

  var serialiser = new _json2.default(minim);

  _drafter2.default.parse(source, options, function (err, parseResult) {
    if (parseResult) {
      done(err, serialiser.deserialise(parseResult));
    } else {
      done(err, parseResult);
    }
  });
}

exports.default = { name: name, mediaTypes: mediaTypes, detect: detect, validate: validate, parse: parse };
//# sourceMappingURL=adapter.map