'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FORM_CONTENT_TYPE = undefined;
exports.isValidContentType = isValidContentType;
exports.isJsonContentType = isJsonContentType;
exports.isMultiPartFormData = isMultiPartFormData;
exports.isFormURLEncoded = isFormURLEncoded;
exports.hasBoundary = hasBoundary;
exports.parseBoundary = parseBoundary;

var _mediaTyper = require('media-typer');

var _mediaTyper2 = _interopRequireDefault(_mediaTyper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FORM_CONTENT_TYPE = exports.FORM_CONTENT_TYPE = 'application/x-www-form-urlencoded';

function isValidContentType(contentType) {
  try {
    _mediaTyper2.default.parse(contentType);
  } catch (e) {
    return false;
  }
  return true;
}

function isJsonContentType(contentType) {
  try {
    var type = _mediaTyper2.default.parse(contentType);
    return type.suffix === 'json' || type.subtype === 'json';
  } catch (e) {
    return false;
  }
}

function isMultiPartFormData(contentType) {
  try {
    var type = _mediaTyper2.default.parse(contentType);
    return type.type === 'multipart' && type.subtype === 'form-data';
  } catch (e) {
    return false;
  }
}

function isFormURLEncoded(contentType) {
  try {
    var type = _mediaTyper2.default.parse(contentType);
    return type.type === 'application' && type.subtype === 'x-www-form-urlencoded';
  } catch (e) {
    return false;
  }
}

function hasBoundary(contentType) {
  try {
    var type = _mediaTyper2.default.parse(contentType);
    return type.parameters.boundary !== undefined;
  } catch (e) {
    return false;
  }
}

function parseBoundary(contentType) {
  var boundary = 'BOUNDARY';

  try {
    var type = _mediaTyper2.default.parse(contentType);

    if (type.parameters.boundary) {
      return type.parameters.boundary;
    }
  } catch (e) {
    // Ignore invalid content type
  }

  return boundary;
}
//# sourceMappingURL=media-type.map