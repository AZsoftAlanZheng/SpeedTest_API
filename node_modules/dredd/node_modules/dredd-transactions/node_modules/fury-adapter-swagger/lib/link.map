{"version":3,"sources":["link.js"],"names":["baseLink","origin","inferred","element","parser","relation","options","minim","elements","StringElement","String","Link","opts","path","url","fragment","href","link","generateSourceMap","createSourceMap","concat","description","meta","get","links","push"],"mappings":";;;;;QAAgBA,Q,GAAAA,Q;QA6BAC,M,GAAAA,M;QAMAC,Q,GAAAA,Q;AAnCT,SAASF,QAAT,CAAkBG,OAAlB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA2D;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAAA,8BACxBF,OAAOG,KAAP,CAAaC,QADW;AAAA,MAChDC,aADgD,yBACxDC,MADwD;AAAA,MACjCC,IADiC,yBACjCA,IADiC;;;AAGhE,MAAMC,OAAO;AACXC,UAAMP,QAAQO,IAAR,IAAgB,EADX;AAEXC,SAAKR,QAAQQ,GAAR,oDAA6DR,QAAQS,QAAR,IAAoB,EAAjF;AAFM,GAAb;;AAKA,MAAMC,OAAO,IAAIP,aAAJ,CAAkBG,KAAKE,GAAvB,CAAb;AACA,MAAMG,OAAO,IAAIN,IAAJ,EAAb;;AAEA,MAAIP,OAAOc,iBAAX,EAA8B;AAC5Bd,WAAOe,eAAP,CAAuBH,IAAvB,EAA6BJ,KAAKC,IAAL,CAAUO,MAAV,CAAiB,CAAC,KAAD,CAAjB,CAA7B;AACD;;AAEDH,OAAKZ,QAAL,GAAgBA,QAAhB;AACAY,OAAKD,IAAL,GAAYA,IAAZ;;AAEA,MAAIV,QAAQe,WAAZ,EAAyB;AACvBJ,SAAKI,WAAL,GAAmBf,QAAQe,WAA3B;;AAEA,QAAIjB,OAAOc,iBAAX,EAA8B;AAC5Bd,aAAOe,eAAP,CAAuBF,KAAKK,IAAL,CAAUC,GAAV,CAAc,aAAd,CAAvB,EAAqDX,KAAKC,IAAL,CAAUO,MAAV,CAAiB,CAAC,aAAD,CAAjB,CAArD;AACD;AACF;;AAEDjB,UAAQqB,KAAR,CAAcC,IAAd,CAAmBR,IAAnB;AACD;;AAEM,SAAShB,MAAT,CAAgBc,QAAhB,EAA0BZ,OAA1B,EAAmCC,MAAnC,EAA2C;AAChDJ,WAASG,OAAT,EAAkBC,MAAlB,EAA0B,QAA1B,EAAoC;AAClCW;AADkC,GAApC;AAGD;;AAEM,SAASb,QAAT,CAAkBa,QAAlB,EAA4BZ,OAA5B,EAAqCC,MAArC,EAA6C;AAClDJ,WAASG,OAAT,EAAkBC,MAAlB,EAA0B,UAA1B,EAAsC;AACpCW;AADoC,GAAtC;AAGD;;kBAEc,EAAEf,kBAAF,EAAYC,cAAZ,EAAoBC,kBAApB,E","file":"link.js","sourcesContent":["export function baseLink(element, parser, relation, options = {}) {\n  const { String: StringElement, Link } = parser.minim.elements;\n\n  const opts = {\n    path: options.path || [],\n    url: options.url || `http://docs.apiary.io/validations/swagger#${(options.fragment || '')}`,\n  };\n\n  const href = new StringElement(opts.url);\n  const link = new Link();\n\n  if (parser.generateSourceMap) {\n    parser.createSourceMap(href, opts.path.concat(['url']));\n  }\n\n  link.relation = relation;\n  link.href = href;\n\n  if (options.description) {\n    link.description = options.description;\n\n    if (parser.generateSourceMap) {\n      parser.createSourceMap(link.meta.get('description'), opts.path.concat(['description']));\n    }\n  }\n\n  element.links.push(link);\n}\n\nexport function origin(fragment, element, parser) {\n  baseLink(element, parser, 'origin', {\n    fragment,\n  });\n}\n\nexport function inferred(fragment, element, parser) {\n  baseLink(element, parser, 'inferred', {\n    fragment,\n  });\n}\n\nexport default { baseLink, origin, inferred };\n"]}