{"version":3,"sources":["adapter.js"],"names":["detect","parse","name","mediaTypes","source","isString","match","swagger","options","done","parser"],"mappings":";;;;;;QAWgBA,M,GAAAA,M;QASAC,K,GAAAA,K;;AApBhB;;;;AACA;;;;;;AAEO,IAAMC,sBAAO,SAAb;;AAEP;AACO,IAAMC,kCAAa,CACxB,0BADwB,EAExB,0BAFwB,CAAnB;;AAKA,SAASH,MAAT,CAAgBI,MAAhB,EAAwB;AAC7B,SAAO,CAAC,EAAE,iBAAEC,QAAF,CAAWD,MAAX,IACNA,OAAOE,KAAP,CAAa,8BAAb,CADM,GAENF,OAAOG,OAAP,KAAmB,KAFf,CAAR;AAGD;;AAED;;;AAGO,SAASN,KAAT,CAAeO,OAAf,EAAwBC,IAAxB,EAA8B;AACnC,MAAMC,SAAS,qBAAWF,OAAX,CAAf;AACAE,SAAOT,KAAP,CAAaQ,IAAb;AACD;;kBAEc;AACbP,YADa,EACPC,sBADO,EACKH,cADL,EACaC;AADb,C","file":"adapter.js","sourcesContent":["import _ from 'lodash';\nimport Parser from './parser';\n\nexport const name = 'swagger';\n\n// TODO: Figure out media type for Swagger 2.0\nexport const mediaTypes = [\n  'application/swagger+json',\n  'application/swagger+yaml',\n];\n\nexport function detect(source) {\n  return !!(_.isString(source)\n    ? source.match(/\"?swagger\"?:\\s*[\"']2\\.0[\"']/g)\n    : source.swagger === '2.0');\n}\n\n/*\n * Parse Swagger 2.0 into Refract elements\n */\nexport function parse(options, done) {\n  const parser = new Parser(options);\n  parser.parse(done);\n}\n\nexport default {\n  name, mediaTypes, detect, parse,\n};\n"]}