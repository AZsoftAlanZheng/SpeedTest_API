{"version":3,"sources":["media-type.js"],"names":["isValidContentType","isJsonContentType","isMultiPartFormData","isFormURLEncoded","hasBoundary","parseBoundary","FORM_CONTENT_TYPE","contentType","parse","e","type","suffix","subtype","parameters","boundary","undefined"],"mappings":";;;;;;QAIgBA,kB,GAAAA,kB;QASAC,iB,GAAAA,iB;QASAC,mB,GAAAA,mB;QASAC,gB,GAAAA,gB;QASAC,W,GAAAA,W;QASAC,a,GAAAA,a;;AAjDhB;;;;;;AAEO,IAAMC,gDAAoB,mCAA1B;;AAEA,SAASN,kBAAT,CAA4BO,WAA5B,EAAyC;AAC9C,MAAI;AACF,yBAAMC,KAAN,CAAYD,WAAZ;AACD,GAFD,CAEE,OAAOE,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACD,SAAO,IAAP;AACD;;AAEM,SAASR,iBAAT,CAA2BM,WAA3B,EAAwC;AAC7C,MAAI;AACF,QAAMG,OAAO,qBAAMF,KAAN,CAAYD,WAAZ,CAAb;AACA,WAAOG,KAAKC,MAAL,KAAgB,MAAhB,IAA0BD,KAAKE,OAAL,KAAiB,MAAlD;AACD,GAHD,CAGE,OAAOH,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAEM,SAASP,mBAAT,CAA6BK,WAA7B,EAA0C;AAC/C,MAAI;AACF,QAAMG,OAAO,qBAAMF,KAAN,CAAYD,WAAZ,CAAb;AACA,WAAOG,KAAKA,IAAL,KAAc,WAAd,IAA6BA,KAAKE,OAAL,KAAiB,WAArD;AACD,GAHD,CAGE,OAAOH,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAEM,SAASN,gBAAT,CAA0BI,WAA1B,EAAuC;AAC5C,MAAI;AACF,QAAMG,OAAO,qBAAMF,KAAN,CAAYD,WAAZ,CAAb;AACA,WAAOG,KAAKA,IAAL,KAAc,aAAd,IAA+BA,KAAKE,OAAL,KAAiB,uBAAvD;AACD,GAHD,CAGE,OAAOH,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAEM,SAASL,WAAT,CAAqBG,WAArB,EAAkC;AACvC,MAAI;AACF,QAAMG,OAAO,qBAAMF,KAAN,CAAYD,WAAZ,CAAb;AACA,WAAOG,KAAKG,UAAL,CAAgBC,QAAhB,KAA6BC,SAApC;AACD,GAHD,CAGE,OAAON,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAEM,SAASJ,aAAT,CAAuBE,WAAvB,EAAoC;AACzC,MAAMO,WAAW,UAAjB;;AAEA,MAAI;AACF,QAAMJ,OAAO,qBAAMF,KAAN,CAAYD,WAAZ,CAAb;;AAEA,QAAIG,KAAKG,UAAL,CAAgBC,QAApB,EAA8B;AAC5B,aAAOJ,KAAKG,UAAL,CAAgBC,QAAvB;AACD;AACF,GAND,CAME,OAAOL,CAAP,EAAU;AACV;AACD;;AAED,SAAOK,QAAP;AACD","file":"media-type.js","sourcesContent":["import typer from 'media-typer';\n\nexport const FORM_CONTENT_TYPE = 'application/x-www-form-urlencoded';\n\nexport function isValidContentType(contentType) {\n  try {\n    typer.parse(contentType);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n\nexport function isJsonContentType(contentType) {\n  try {\n    const type = typer.parse(contentType);\n    return type.suffix === 'json' || type.subtype === 'json';\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function isMultiPartFormData(contentType) {\n  try {\n    const type = typer.parse(contentType);\n    return type.type === 'multipart' && type.subtype === 'form-data';\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function isFormURLEncoded(contentType) {\n  try {\n    const type = typer.parse(contentType);\n    return type.type === 'application' && type.subtype === 'x-www-form-urlencoded';\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function hasBoundary(contentType) {\n  try {\n    const type = typer.parse(contentType);\n    return type.parameters.boundary !== undefined;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function parseBoundary(contentType) {\n  const boundary = 'BOUNDARY';\n\n  try {\n    const type = typer.parse(contentType);\n\n    if (type.parameters.boundary) {\n      return type.parameters.boundary;\n    }\n  } catch (e) {\n    // Ignore invalid content type\n  }\n\n  return boundary;\n}\n"]}