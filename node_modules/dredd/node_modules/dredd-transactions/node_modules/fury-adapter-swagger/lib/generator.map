{"version":3,"sources":["generator.js"],"names":["bodyFromSchema","bodyFromFormParameter","option","useDefaultValue","maxItems","maxLength","schema","payload","parser","contentType","Asset","minim","elements","asset","body","example","stringify","boundary","content","forEach","value","key","classes","push","exception","createAnnotation","DATA_LOST","path","param","paramSchema","clone","retSchema","undefined","enum","name","in","format","required","collectionFormat","allowEmptyValue","items","properties"],"mappings":";;;;;;;;;;QAagBA,c,GAAAA,c;QAkDAC,qB,GAAAA,qB;;AA/DhB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA,0BAAMC,MAAN,CAAa;AACXC,mBAAiB,IADN;AAEXC,YAAU,CAFC;AAGXC,aAAW;AAHA,CAAb;;AAMO,SAASL,cAAT,CAAwBM,MAAxB,EAAgCC,OAAhC,EAAyCC,MAAzC,EAAmF;AAAA,MAAlCC,WAAkC,uEAApB,kBAAoB;AAAA,MAChFC,KADgF,GACtEF,OAAOG,KAAP,CAAaC,QADyD,CAChFF,KADgF;;AAExF,MAAIG,QAAQ,IAAZ;;AAEA,MAAI;AACF,QAAIC,OAAOR,OAAOS,OAAP,IAAkB,+BAAMT,MAAN,CAA7B;;AAEA,QAAI,OAAOQ,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAI,iCAAiBL,WAAjB,CAAJ,EAAmC;AACjC;AACA;AACAK,eAAO,sBAAYE,SAAZ,CAAsBF,IAAtB,CAAP;AACD,OAJD,MAIO,IAAI,oCAAoBL,WAApB,CAAJ,EAAsC;AAC3C,YAAMQ,WAAW,8BAAcR,WAAd,CAAjB;AACA,YAAIS,UAAU,EAAd;;AAEA,yBAAEC,OAAF,CAAUL,IAAV,EAAgB,UAACM,KAAD,EAAQC,GAAR,EAAgB;AAC9BH,4BAAgBD,QAAhB;AACAC,gEAAoDG,GAApD;AACAH,qBAAcE,KAAd;AACD,SAJD;;AAMAF,8BAAoBD,QAApB;;AAEAH,eAAOI,OAAP;AACD,OAbM,MAaA;AACL;AACAJ,eAAO,yBAAeA,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAP;AACD;AACF;;AAEDD,YAAQ,IAAIH,KAAJ,CAAUI,IAAV,CAAR;;AAEAD,UAAMS,OAAN,CAAcC,IAAd,CAAmB,aAAnB;AACAV,UAAMJ,WAAN,GAAoBA,WAApB;;AAEA,wBAAS,yBAAT,EAAoCI,KAApC,EAA2CL,MAA3C;;AAEAD,YAAQW,OAAR,CAAgBK,IAAhB,CAAqBV,KAArB;AACD,GAnCD,CAmCE,OAAOW,SAAP,EAAkB;AAClBhB,WAAOiB,gBAAP,CACE,sBAAYC,SADd,EACyBlB,OAAOmB,IADhC,0BAEwBlB,WAFxB;AAID;;AAED,SAAOI,KAAP;AACD;;AAED;AACO,SAASZ,qBAAT,CAA+B2B,KAA/B,EAAsCtB,MAAtC,EAA8C;AACnD;AACA;AACA,MAAMuB,cAAc,iBAAEC,KAAF,CAAQF,KAAR,CAApB;AACA,MAAMG,YAAY,iBAAED,KAAF,CAAQxB,MAAR,CAAlB;;AAEA;AACA;AACA,MAAIsB,MAAM,WAAN,MAAuBI,SAA3B,EAAsC;AACpCH,gBAAYI,IAAZ,GAAmB,CAACL,MAAM,WAAN,CAAD,CAAnB;AACD;;AAED,SAAOC,YAAYK,IAAnB;AACA,SAAOL,YAAYM,EAAnB;AACA,SAAON,YAAYO,MAAnB;AACA,SAAOP,YAAYQ,QAAnB;AACA,SAAOR,YAAY,WAAZ,CAAP;AACA,SAAOA,YAAYS,gBAAnB;AACA,SAAOT,YAAYU,eAAnB,CAlBmD,CAkBf;AACpC,SAAOV,YAAYW,KAAnB,CAnBmD,CAmBzB;;AAE1BT,YAAUU,UAAV,CAAqBb,MAAMM,IAA3B,IAAmCL,WAAnC;;AAEA,MAAID,MAAMS,QAAV,EAAoB;AAClBN,cAAUM,QAAV,CAAmBd,IAAnB,CAAwBK,MAAMM,IAA9B;AACD;;AAED,SAAOH,SAAP;AACD;;kBAEc,EAAE/B,8BAAF,EAAkBC,4CAAlB,E","file":"generator.js","sourcesContent":["import _ from 'lodash';\nimport querystring from 'querystring';\nimport faker from 'json-schema-faker';\nimport annotations from './annotations';\nimport { inferred } from './link';\nimport { isFormURLEncoded, isMultiPartFormData, parseBoundary } from './media-type';\n\nfaker.option({\n  useDefaultValue: true,\n  maxItems: 5,\n  maxLength: 256,\n});\n\nexport function bodyFromSchema(schema, payload, parser, contentType = 'application/json') {\n  const { Asset } = parser.minim.elements;\n  let asset = null;\n\n  try {\n    let body = schema.example || faker(schema);\n\n    if (typeof body !== 'string') {\n      if (isFormURLEncoded(contentType)) {\n        // Form data\n        // TODO: check for arrays etc.\n        body = querystring.stringify(body);\n      } else if (isMultiPartFormData(contentType)) {\n        const boundary = parseBoundary(contentType);\n        let content = '';\n\n        _.forEach(body, (value, key) => {\n          content += `--${boundary}\\r\\n`;\n          content += `Content-Disposition: form-data; name=\"${key}\"\\r\\n\\r\\n`;\n          content += `${value}\\r\\n`;\n        });\n\n        content += `\\r\\n--${boundary}--\\r\\n`;\n\n        body = content;\n      } else {\n        // JSON\n        body = JSON.stringify(body, null, 2);\n      }\n    }\n\n    asset = new Asset(body);\n\n    asset.classes.push('messageBody');\n    asset.contentType = contentType;\n\n    inferred('message-body-generation', asset, parser);\n\n    payload.content.push(asset);\n  } catch (exception) {\n    parser.createAnnotation(\n      annotations.DATA_LOST, parser.path,\n      `Unable to generate ${contentType} example message body out of JSON Schema`,\n    );\n  }\n\n  return asset;\n}\n\n// Generates body asset from formData parameters.\nexport function bodyFromFormParameter(param, schema) {\n  // Preparing throwaway schema. Later we will feed the 'bodyFromSchema'\n  // with it.\n  const paramSchema = _.clone(param);\n  const retSchema = _.clone(schema);\n\n  // If there's example value, we want to force the body generator\n  // to use it. This is done using 'enum' with a single value.\n  if (param['x-example'] !== undefined) {\n    paramSchema.enum = [param['x-example']];\n  }\n\n  delete paramSchema.name;\n  delete paramSchema.in;\n  delete paramSchema.format;\n  delete paramSchema.required;\n  delete paramSchema['x-example'];\n  delete paramSchema.collectionFormat;\n  delete paramSchema.allowEmptyValue; // allowEmptyValue is not supported yet\n  delete paramSchema.items; // arrays are not supported yet\n\n  retSchema.properties[param.name] = paramSchema;\n\n  if (param.required) {\n    retSchema.required.push(param.name);\n  }\n\n  return retSchema;\n}\n\nexport default { bodyFromSchema, bodyFromFormParameter };\n"]}