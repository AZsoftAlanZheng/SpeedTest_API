{"version":3,"sources":["schema.js"],"names":["DataStructureGenerator","minim","schema","element","generateElement","DataStructure","elements","dataStructure","name","property","StringElement","String","MemberElement","Member","member","key","value","description","EnumElement","Enum","enumerations","enum","ObjectElement","Object","properties","required","allOf","Array","isArray","filter","subschema","type","allProperties","map","reduce","accumulator","concat","content","generateMember","isRequired","includes","attributes","set","ArrayElement","items","forEach","item","itemElement","push","validations","pattern","maxLength","minLength","multipleOf","maximum","minimum","exclusiveMaximum","exclusiveMinimum","minProperties","maxProperties","maxItems","minItems","uniqueItems","format","chain","compact","NumberElement","Number","BooleanElement","Boolean","NullElement","Null","typeGeneratorMap","boolean","string","number","integer","null","generateEnum","generateArray","generateObject","title","def","default","undefined","isObject","samples","examples","example","length","validationDescriptions","generateValidationDescriptions","toValue","splice","join"],"mappings":"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","file":"schema.js","sourcesContent":["/* eslint-disable class-methods-use-this */\n\nimport _ from 'lodash';\n\n/*\n * Data Structure Generator\n * Generates a dataStructure element from a JSON schema.\n *\n * >>> const generator = new DataStructureGenerator(minimNamespace);\n * >>> const dataStructure = generator.generateDataStructure({type: 'string'});\n*/\nexport default class DataStructureGenerator {\n  constructor(minim) {\n    this.minim = minim;\n  }\n\n  // Generates a data structure element representing the given schema\n  generateDataStructure(schema) {\n    const element = this.generateElement(schema);\n\n    if (!element) {\n      return null;\n    }\n\n    const { DataStructure } = this.minim.elements;\n    const dataStructure = new DataStructure(element);\n    return dataStructure;\n  }\n\n  // Generates a member element for a property in a schema\n  generateMember(name, property) {\n    const {\n      String: StringElement,\n      Member: MemberElement,\n    } = this.minim.elements;\n\n    const member = new MemberElement();\n    member.key = new StringElement(name);\n    member.value = this.generateElement(property);\n\n    if (property.description) {\n      member.description = property.description;\n    }\n\n    return member;\n  }\n\n  // Generates an enum element for the given enum schema\n  generateEnum(schema) {\n    const { Enum: EnumElement } = this.minim.elements;\n\n    const element = new EnumElement();\n\n    element.enumerations = schema.enum;\n\n    return element;\n  }\n\n  // Generates an object element from the given object schema\n  generateObject(schema) {\n    const {\n      Object: ObjectElement,\n    } = this.minim.elements;\n\n    let properties = schema.properties || {};\n    let required = schema.required || [];\n\n    if (schema.allOf && Array.isArray(schema.allOf)) {\n      // Merge all of the object allOf into properties and required\n      const allOf = schema.allOf.filter(subschema => subschema.type === 'object');\n\n      const allProperties = allOf\n        .filter(subschema => subschema.properties)\n        .map(subschema => subschema.properties);\n      properties = Object.assign(properties, ...allProperties);\n\n      required = allOf\n        .filter(subschema => subschema.required)\n        .map(subschema => subschema.required)\n        .reduce((accumulator, property) => accumulator.concat(property), required);\n    }\n\n    const element = new ObjectElement();\n    element.content = _.map(properties, (subschema, property) => {\n      const member = this.generateMember(property, subschema);\n\n      const isRequired = required.includes(property);\n      member.attributes.set('typeAttributes', [\n        isRequired ? 'required' : 'optional',\n      ]);\n\n      return member;\n    });\n\n    return element;\n  }\n\n  // Generates an array element from the given array schema\n  generateArray(schema) {\n    const { Array: ArrayElement } = this.minim.elements;\n    const element = new ArrayElement();\n\n    if (schema.items) {\n      if (_.isArray(schema.items)) {\n        schema.items.forEach((item) => {\n          const itemElement = this.generateElement(item);\n          if (itemElement) {\n            element.push(itemElement);\n          }\n        });\n      } else {\n        const itemElement = this.generateElement(schema.items);\n        if (itemElement) {\n          element.push(itemElement);\n        }\n      }\n    }\n\n    return element;\n  }\n\n  // Generates an array of descriptions for each validation rule in the given schema.\n  generateValidationDescriptions(schema) {\n    const validations = {\n      // String\n      pattern: value => `Matches regex pattern: \\`${value}\\``,\n      maxLength: value => `Length of string must be less than, or equal to ${value}`,\n      minLength: value => `Length of string must be greater than, or equal to ${value}`,\n\n      // Number\n      multipleOf: value => `Number must be a multiple of ${value}`,\n      maximum: value => `Number must be less than, or equal to ${value}`,\n      minimum: value => `Number must be more than, or equal to ${value}`,\n      exclusiveMaximum: value => `Number must be less than ${value}`,\n      exclusiveMinimum: value => `Number must be more than ${value}`,\n\n      // Object\n      minProperties: value => `Object must have more than, or equal to ${value} properties`,\n      maxProperties: value => `Object must have less than, or equal to ${value} properties`,\n\n      // Array\n      maxItems: value => `Array length must be less than, or equal to ${value}`,\n      minItems: value => `Array length must be more than, or equal to ${value}`,\n      uniqueItems: () => 'Array contents must be unique',\n\n      // Other\n      format: value => `Value must be of format '${value}'`,\n    };\n\n    return _\n      .chain(validations)\n      .map((value, key) => {\n        if (schema[key]) {\n          return value(schema[key]);\n        }\n\n        return null;\n      })\n      .compact()\n      .value();\n  }\n\n  // Generates an element representing the given schema\n  generateElement(schema) {\n    const {\n      String: StringElement,\n      Number: NumberElement,\n      Boolean: BooleanElement,\n      Null: NullElement,\n      Enum: EnumElement,\n    } = this.minim.elements;\n\n    const typeGeneratorMap = {\n      boolean: BooleanElement,\n      string: StringElement,\n      number: NumberElement,\n      integer: NumberElement,\n      null: NullElement,\n    };\n\n    let element;\n\n    if (schema.enum) {\n      element = this.generateEnum(schema);\n    } else if (schema.type === 'array') {\n      element = this.generateArray(schema);\n    } else if (schema.type === 'object') {\n      element = this.generateObject(schema);\n    } else if (schema.type && typeGeneratorMap[schema.type]) {\n      element = new typeGeneratorMap[schema.type]();\n    } else if (_.isArray(schema.type)) {\n      // TODO: Support multiple `type`\n    }\n\n    if (element) {\n      if (schema.title) {\n        element.title = new StringElement(schema.title);\n      }\n\n      if (schema.description) {\n        element.description = new StringElement(schema.description);\n      }\n\n      let def = schema.default;\n\n      if (def !== undefined && !_.isArray(def) && !_.isObject(def)) {\n        // TODO Support defaults for arrays and objects\n        if (schema.enum) {\n          def = new EnumElement(def);\n        }\n\n        element.attributes.set('default', def);\n      }\n\n      let samples = [];\n\n      if (schema.examples) {\n        samples = schema.examples;\n      } else if (schema.example) {\n        samples = [schema.example];\n      }\n\n      if (samples.length) {\n        if (schema.enum) {\n          samples = samples.map(item => new EnumElement(item));\n        }\n\n        element.attributes.set('samples', samples);\n      }\n\n      const validationDescriptions = this.generateValidationDescriptions(schema);\n\n      if (validationDescriptions.length > 0) {\n        const description = validationDescriptions.map(value => `- ${value}`);\n\n        if (element.description && element.description.toValue()) {\n          description.splice(0, 0, `${element.description.toValue()}\\n`);\n        }\n\n        element.description = new StringElement(description.join('\\n'));\n      }\n    }\n\n    return element;\n  }\n}\n"]}