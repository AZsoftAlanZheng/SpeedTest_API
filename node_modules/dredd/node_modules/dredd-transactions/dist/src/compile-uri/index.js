'use strict';

var compileParams = require('./compile-params');
var validateParams = require('./validate-params');
var expandUriTemplate = require('./expand-uri-template');

module.exports = function index(httpRequestElement) {
  var annotations = [];
  var cascade = [httpRequestElement.parents.find('resource'), httpRequestElement.parents.find('transition'), httpRequestElement];

  function overrideParams(params) {
    var paramsToOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var result = Object.assign({}, params);

    Object.keys(paramsToOverride).forEach(function (paramName) {
      var param = paramsToOverride[paramName];
      result[paramName] = param;
    });

    return result;
  }

  // The last non-empty href overrides any previous hrefs
  var href = cascade.map(function (element) {
    var value = element.href ? element.href.toValue() : undefined;
    return value;
  }).filter(function (hrefParam) {
    return !!hrefParam;
  }).pop();

  // Support for 'httpRequest' parameters is experimental. The element does
  // not have the '.hrefVariables' convenience property yet. If it's added in
  // the future, '.attributes.get('hrefVariables')' can be replaced
  // with '.hrefVariables'.
  var params = cascade.map(function (element) {
    return compileParams(element.attributes.get('hrefVariables'));
  }).reduce(overrideParams, {});

  var result = validateParams(params);
  var component = 'parametersValidation';
  result.errors.forEach(function (error) {
    return annotations.push({ type: 'error', component, message: error });
  });
  result.warnings.forEach(function (warning) {
    return annotations.push({ type: 'warning', component, message: warning });
  });

  result = expandUriTemplate(href, params);
  component = 'uriTemplateExpansion';
  result.errors.forEach(function (error) {
    return annotations.push({ type: 'error', component, message: error });
  });
  result.warnings.forEach(function (warning) {
    return annotations.push({ type: 'warning', component, message: warning });
  });

  return { uri: result.uri, annotations };
};