'use strict';

var ut = require('uri-template');

module.exports = function expandURITemplate(uriTemplate, params) {
  var parsed = void 0;
  var result = {
    errors: [],
    warnings: [],
    uri: null
  };

  try {
    parsed = ut.parse(uriTemplate);
  } catch (e) {
    result.errors.push(`\
Failed to parse URI template: ${uriTemplate}
Error: ${e}\
`);
    return result;
  }

  // Get parameters from expression object
  var uriParameters = parsed.expressions.map(function (expression) {
    return expression.params.map(function (param) {
      return param.name;
    });
  }).reduce(function (accumulator, current) {
    return accumulator.concat(current);
  }, []);

  if (parsed.expressions.length === 0) {
    result.uri = uriTemplate;
  } else {
    var ambiguous = false;

    uriParameters.forEach(function (uriParameter) {
      if (Object.keys(params).indexOf(uriParameter) === -1) {
        ambiguous = true;
        result.warnings.push(`\
Ambiguous URI parameter in template: ${uriTemplate}
Parameter not defined in API description document: ${uriParameter}\
`);
      }
    });

    var param = void 0;
    var toExpand = {};

    if (!ambiguous) {
      uriParameters.forEach(function (uriParameter) {
        param = params[uriParameter];

        if (param.example) {
          toExpand[uriParameter] = param.example;
        } else if (param.default) {
          toExpand[uriParameter] = param.default;
        } else if (param.required) {
          ambiguous = true;
          result.warnings.push(`\
Ambiguous URI parameter in template: ${uriTemplate}
No example value for required parameter in API description \
document: ${uriParameter}\
`);
        }

        if (param.required && param.default) {
          result.warnings.push(`\
Required URI parameter '${uriParameter}' has a default value.
Default value for a required parameter doesn't make sense from \
API description perspective. Use example value instead.\
`);
        }
      });
    }

    if (!ambiguous) {
      result.uri = parsed.expand(toExpand);
    }
  }

  return result;
};