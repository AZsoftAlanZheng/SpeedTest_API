'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var clone = require('clone');

var detectTransactionExampleNumbers = require('./detect-transaction-example-numbers');
var compileUri = require('./compile-uri');
var getTransactionName = require('./transaction-name');
var getTransactionPath = require('./transaction-path');

function findRelevantTransactions(mediaType, apiElements) {
  var relevantTransactions = [];
  apiElements.findRecursive('resource', 'transition').forEach(function (transitionElement) {
    if (mediaType === 'text/vnd.apiblueprint') {
      // API Blueprint has a concept of transaction examples and
      // the API Blueprint AST used to expose it. The concept isn't present
      // in API Elements anymore, so we have to detect and backport them, because
      // the example numbers are used in the transaction names for hooks.
      //
      // This is very specific to API Blueprint and to backwards compatibility
      // of Dredd. There's a plan to migrate to so-called "transaction paths"
      // in the future (apiaryio/dredd#227), which won't use the concept
      // of transaction examples anymore.
      var transactionExampleNumbers = detectTransactionExampleNumbers(transitionElement);
      var hasMoreExamples = Math.max.apply(Math, _toConsumableArray(Array.from(transactionExampleNumbers || []))) > 1;

      // Dredd supports only testing of the first request-response pair within
      // each transaction example. We iterate over available transactions and
      // skip those, which are not first within a particular example.
      var exampleNo = 0;
      transitionElement.transactions.forEach(function (httpTransactionElement, httpTransactionNo) {
        var httpTransactionExampleNo = transactionExampleNumbers[httpTransactionNo];
        if (httpTransactionExampleNo !== exampleNo) {
          var relevantTransaction = { httpTransactionElement };
          if (hasMoreExamples) {
            relevantTransaction.exampleNo = httpTransactionExampleNo;
          }
          relevantTransactions.push(relevantTransaction);
        }
        exampleNo = httpTransactionExampleNo;
        return exampleNo;
      });
    } else {
      // All other formats then API Blueprint
      transitionElement.transactions.forEach(function (httpTransactionElement) {
        return relevantTransactions.push({ httpTransactionElement });
      });
    }
  });
  return relevantTransactions;
}

function compileHeaders(httpHeadersElement) {
  if (!httpHeadersElement) {
    return [];
  }
  return httpHeadersElement.toValue().map(function (_ref) {
    var key = _ref.key,
        value = _ref.value;
    return { name: key, value };
  });
}

function compileOriginExampleName(mediaType, httpResponseElement, exampleNo) {
  var exampleName = '';

  if (mediaType === 'text/vnd.apiblueprint') {
    if (exampleNo) {
      exampleName = `Example ${exampleNo}`;
    }
  } else {
    var statusCode = (httpResponseElement.statusCode ? httpResponseElement.statusCode.toValue() : undefined) || '200';
    var headers = compileHeaders(httpResponseElement.headers);

    var contentType = headers.filter(function (header) {
      return header.name.toLowerCase() === 'content-type';
    }).map(function (header) {
      return header.value;
    })[0];

    var segments = [];
    if (statusCode) {
      segments.push(statusCode);
    }
    if (contentType) {
      segments.push(contentType);
    }
    exampleName = segments.join(' > ');
  }

  return exampleName;
}

function compileOrigin(mediaType, filename, httpTransactionElement, exampleNo) {
  var apiElement = httpTransactionElement.parents.find(function (element) {
    return element.classes.contains('api');
  });
  var resourceGroupElement = httpTransactionElement.parents.find(function (element) {
    return element.classes.contains('resourceGroup');
  });
  var resourceElement = httpTransactionElement.parents.find('resource');
  var transitionElement = httpTransactionElement.parents.find('transition');
  var httpRequestElement = httpTransactionElement.request;
  var httpResponseElement = httpTransactionElement.response;
  return {
    filename: filename || '',
    apiName: apiElement.meta.getValue('title') || filename || '',
    resourceGroupName: (resourceGroupElement ? resourceGroupElement.meta.getValue('title') : undefined) || '',
    resourceName: resourceElement.meta.getValue('title') || resourceElement.attributes.getValue('href') || '',
    actionName: transitionElement.meta.getValue('title') || httpRequestElement.attributes.getValue('method') || '',
    exampleName: compileOriginExampleName(mediaType, httpResponseElement, exampleNo)
  };
}

function compileRequest(httpRequestElement) {
  var request = void 0;

  var _compileUri = compileUri(httpRequestElement),
      uri = _compileUri.uri,
      annotations = _compileUri.annotations;

  annotations.forEach(function (annotation) {
    /* eslint-disable no-param-reassign */
    annotation.location = (httpRequestElement.href ? httpRequestElement.href.sourceMapValue : undefined) || (httpRequestElement.parents.find('transition').href ? httpRequestElement.parents.find('transition').href.sourceMapValue : undefined) || (httpRequestElement.parents.find('resource').href ? httpRequestElement.parents.find('resource').href.sourceMapValue : undefined);
    /* eslint-enable */
  });

  if (uri) {
    request = {
      method: httpRequestElement.method.toValue(),
      uri,
      headers: compileHeaders(httpRequestElement.headers),
      body: (httpRequestElement.messageBody ? httpRequestElement.messageBody.toValue() : undefined) || ''
    };
  } else {
    request = null;
  }

  return { request, annotations };
}

function compileResponse(httpResponseElement) {
  var response = {
    status: (httpResponseElement.statusCode ? httpResponseElement.statusCode.toValue() : undefined) || '200',
    headers: compileHeaders(httpResponseElement.headers)
  };

  var body = httpResponseElement.messageBody ? httpResponseElement.messageBody.toValue() : undefined;
  if (body) {
    response.body = body;
  }

  var schema = httpResponseElement.messageBodySchema ? httpResponseElement.messageBodySchema.toValue() : undefined;
  if (schema) {
    response.schema = schema;
  }

  return response;
}

function compilePathOrigin(filename, httpTransactionElement, exampleNo) {
  var apiElement = httpTransactionElement.parents.find(function (element) {
    return element.classes.contains('api');
  });
  var resourceGroupElement = httpTransactionElement.parents.find(function (element) {
    return element.classes.contains('resourceGroup');
  });
  var resourceElement = httpTransactionElement.parents.find('resource');
  var transitionElement = httpTransactionElement.parents.find('transition');
  var httpRequestElement = httpTransactionElement.request;
  return {
    apiName: apiElement.meta.getValue('title') || '',
    resourceGroupName: (resourceGroupElement ? resourceGroupElement.meta.getValue('title') : undefined) || '',
    resourceName: resourceElement.meta.getValue('title') || resourceElement.attributes.getValue('href') || '',
    actionName: transitionElement.meta.getValue('title') || httpRequestElement.attributes.getValue('method') || '',
    exampleName: `Example ${exampleNo || 1}`
  };
}

function compileTransaction(mediaType, filename, httpTransactionElement, exampleNo) {
  var origin = compileOrigin(mediaType, filename, httpTransactionElement, exampleNo);

  var _compileRequest = compileRequest(httpTransactionElement.request),
      request = _compileRequest.request,
      annotations = _compileRequest.annotations;

  annotations.forEach(function (annotation) {
    annotation.origin = clone(origin);
  }); // eslint-disable-line

  if (!request) {
    return { transaction: null, annotations };
  }

  var name = getTransactionName(origin);
  var pathOrigin = compilePathOrigin(filename, httpTransactionElement, exampleNo);
  var path = getTransactionPath(pathOrigin);
  var response = compileResponse(httpTransactionElement.response);

  var transaction = { request, response, origin, name, pathOrigin, path };
  return { transaction, annotations };
}

function compileAnnotation(annotationElement) {
  return {
    type: annotationElement.classes.getValue(0),
    component: 'apiDescriptionParser',
    message: annotationElement.toValue(),
    location: annotationElement.sourceMapValue || [[0, 1]]
  };
}

function compile(mediaType, apiElements, filename) {
  apiElements.freeze();

  var transactions = [];
  var annotations = apiElements.annotations.map(compileAnnotation);

  findRelevantTransactions(mediaType, apiElements).forEach(function (_ref2) {
    var httpTransactionElement = _ref2.httpTransactionElement,
        exampleNo = _ref2.exampleNo;

    var result = compileTransaction(mediaType, filename, httpTransactionElement, exampleNo);
    if (result.transaction) {
      transactions.push(result.transaction);
    }
    annotations = annotations.concat(result.annotations);
  });

  return { mediaType, transactions, annotations };
}

module.exports = compile;